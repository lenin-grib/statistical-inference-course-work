qnorm(70, mean = 80, sd = 10)
pnorm(70, mean = 80, sd = 10)
qnorm(.975, mean = 1100, sd = 75)
150/10
pbinom(4, size = 5, prob = 1/2, lower.tail = FALSE)
pbinom(4:5, size = 5, prob = 1/2, lower.tail = FALSE)
pbinom(5, size = 5, prob = 1/2, lower.tail = FALSE)
pbinom(1, size = 5, prob = 1/2, lower.tail = FALSE)
pbinom(2, size = 5, prob = 1/2, lower.tail = FALSE)
pbinom(3, size = 5, prob = 1/2, lower.tail = FALSE)
?pbinom
pbinom(4, n = 5, prob = 1/2, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 10)
pnorm(14, mean = 15, sd = 10, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 10)
pnorm(16, mean = 15, sd = 10, lower.tail = FALSE)
20/10
?ppois
ppois(10, 15)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 7.5)
library(swirl)
swirl()
myplot
myplot(2)
myplot(20)
myplot2(2)
qt(.975,df=2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
range(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975, df = 9)
mn + c(-1,1)*qt(.975, df = 9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
sp<-7*15.34^2+20*18.23^2
ns <- 8+21-2
sp <- sqrt(sp/ns)
(132.86-127.44)+ c(-1,1)*qt(0.975,27)*sp/sqrt(1/8+1/21)
(132.86-127.44)+ c(-1,1)*qt(0.975,ns)*sp/sqrt(1/8+1/21)
(132.86-127.44)+ c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8+1/21)
sp<-sqrt()
sp<-sqrt((sd(g1)*9+sd(g2)*9)/18)
sp<-sqrt((var(g1)*9+var(g2)*9)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(md,18)*sp*sqrt(2/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(2/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1, paired = F, var.equal = T)$conf
t.test(g2,g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE)$conf
num <- (15.34^2/7+18.23^2/20)^2
num <- (15.34^2/8+18.23^2/21)^2
den<-15.34^4/64/7+18.23^4/21^2/20
mydf<-num/den
132.86-127.44 + c(-1,1)*mydf*sqrt(15.34^2/8+18.23^2/21)
132.86-127.44 + c(-1,1)*qt(0.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
1
(32-30)/1
2/1/4
2/10/4
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$fheight,fs$sheight, paired = TRUE)
11.7885 *sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
6
8
pt(2.5,15, lower.tail = FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(7,size = 8, prob = 0.5)
ppois(9,5,lower.tail = FALSE)
?t.test
30/3
1100+c(-1,1)*qt(0.975,8)*10
1100+c(-1,1)*qt(0.95,8)*10
2*3/0.975
2/0.975
2*3/0.95
2*3/0.975
2*3/0.975/2
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9+1/9)
-2+c(-1,1)*qt(.975,18)*0.8/sqrt(9)
-2+c(-1,1)*qt(.975,18)*0.8/sqrt(18)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9+1/9)
2+c(-1,1)*qnorm(.975)*sqrt(0.5)*sqrt(1/99+1/99)
sd <- sqrt((8*1.5^2+8*1.8^2)/16)
sd
-4+c(-1,1)*qt(.95,16)*sd*sqrt(1/9+1/9)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/10+1/10)
2+c(-1,1)*qnorm(.975)*sqrt(0.5)*sqrt(2/100)
qt(0.975,8)
4.3/3
6/2.3
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean = 30, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt ="one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt ="one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt ="one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type ="one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type ="one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type ="one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type ="one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd=1, type ="one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
tail(trueStatus)
table(pValues1<0.05, trueStatus)
table(pValues2<0.05, trueStatus)
0
24/500
table(p.agjust(pValues2, method = "bonferroni")<0.05, trueStatus)
table(p.adjust(pValues2, method = "bonferroni")<0.05, trueStatus)
table(p.adjust(pValues2, method = "BH")<0.05, trueStatus)
swirl()
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace = T)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- spply(resam, 1, median)
meds <- apply(resam, 1, median)
median(fh)-median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025,0.975))
quantile(meds, c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
ods <- testStat(BCcounts, group)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts,sample(group)))
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,sample(group)))
data <- data.frame(1:5, 140,138,150, 148, 135)
data
baseline <- c(140,138,150, 148, 135)
week2 <- c(132, 135,151,146,130)
data <- data.frame(1:5, baseline, week2)
data
?t.test
t.test(data$baseline, data$week2, paired = TRUE)
t.test(data$baseline, data$week2, paired = TRUE, alternative = "less")
t.test(data$baseline, data$week2, paired = TRUE, alternative = "greater")
qt(0.025)
qt(0.025, 8)
qt(0.9755, 8)
qt(0.975, 8)
qt(0.975, 8)*30*sqrt(2/9)
1100+c(-1,1)*32.6
1100 + c(-1,1)*qt(0.975, 8)*30*sqrt(2/9)
1100 + c(-1,1)*qt(0.975, 16)*30*sqrt(2/9)
1100 + c(-1,1)*qt(0.975, 9)*30*sqrt(1/9)
data <- data.frame(c(1:4), coke <- c(1,1,1,0))
data
coke <- c(1,1,1,0)
ids <- c(1:4)
data <- data.frame(ids, coke)
data
?binom.test
binom.test(3,4,alternative = g)
binom.test(3,4,alternative = "g")
?poisson.test
poisson.test(10/1787, 1/100, alternative = "g")
poisson.test(10, 1787, 1/100, alternative = "g")
poisson.test(10, 1787, 1/100, alternative = "l")
sp <- sqrt((8*1.5^2+8*1.8^2)/16)
sp
qt1 <- -4/(sp*sqrt(2/9))
qt1
qt(16, 0.95)
qt(0.95, 16)
qt(0.9, 16)
qt(0.8, 16)
qt(0.99, 16)
qt(0.999, 16)
?power.t.test
power.t.test(n=100, delta = 0.01, sd = 0.04, alternative = "one.sided")
power.t.test(n=100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided")
power.t.test(power = 0.9, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided")
power.t.test(n=100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided", sig.level = 0.1)
power.t.test(n=100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided", sig.level = 0.2)
data <- data.frame(1:5, baseline, week2)
data
?t.test
t.test(data, alternative = "t", paired = TRUE)
t.test(data$baseline, data$week2, alternative = "t", paired = TRUE)
t.test(data$week2, data$baseline, alternative = "t", paired = TRUE)
t.test(data$week2, data$baseline, paired = TRUE)
t.test(data$baseline, data$week2, paired = TRUE, alternative = "greater")
?pt
qt1
pt(qt1,16)
?rexp
seed(1)
lambda = 0.2
n = 40
dist <- rexp(n, lambda)
hist(dist)
seed(1)
lambda = 0.2
n = 40
dist <- rexp(n, lambda)
hist(dist)
dist <- rexp(3, lambda)
hist(dist)
dist <- rexp(40, lambda)
hist(rexp(40, lambda))
mns = NULL
for (i in 1 : 1000) mns = c(mns, rexp(n, lambda)))
mns = NULL
for (i in 1 : 1000) mns = c(mns, rexp(n, lambda))
hist(mns)
median(nms)
median(mns)
1/0.2
mns = NULL
for (i in 1 : 1000) mns = c(mns, rexp(n, lambda))
hist(mns)
mean(mns)
mns = NULL
for (i in 1 : 1000){seed(1)
mns = c(mns, rexp(n, lambda)))}
mns = NULL
for (i in 1 : 1000){seed(1)
mns = c(mns, rexp(n, lambda))})
mns = NULL
for (i in 1 : 1000) {seed(1)
mns = c(mns, rexp(n, lambda))}
?seed
seed(1)
??seed
mns = NULL
for (i in 1 : 1000) {set.seed(1)
mns = c(mns, rexp(n, lambda))}
)
mns = NULL
for (i in 1 : 1000) {set.seed(1)
mns = c(mns, rexp(n, lambda)))}
mns = NULL
for (i in 1 : 1000) {set.seed(1)
mns = c(mns, rexp(n, lambda))}
hist(mns)
mns = NULL
for (i in 1 : 1000) {set.seed(1)
mns = c(mns, rexp(n, lambda))}
hist(mns)
mns = NULL
for (i in 1 : 1000) {set.seed(3)
mns = c(mns, rexp(n, lambda))}
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, rexp(n, lambda))
hist(mns)
?var
set.seed(2019)
for (i in 1 : 1000) mns = c(mns, rexp(n, lambda))
hist(mns)
for (i in 1 : 1000) {dist = rexp(n, lambda)
mns = c(mns, dist)
vars[i] = var(dist)}
for (i in 1 : 1000) {dist <- rexp(n, lambda)
mns = c(mns, dist)
vars[i] = var(dist)}
vars=NULL
mns = NULL
for (i in 1 : 1000) {dist <- rexp(n, lambda)
mns = c(mns, dist)
vars[i] = var(dist)}
hist(mns)
hist(vars)
mean(vars)
var(mns)
?variance
sd(mns)^2
lambda = 0.2
n = 40
mns = NULL
vars = NULL
set.seed()
for (i in 1 : 1000) {
dist <- rexp(n, lambda)
mns = c(mns, dist)
vars[i] = var(dist)}
lambda = 0.2
n = 40
mns = NULL
vars = NULL
set.seed(2019)
for (i in 1 : 1000) {
dist <- rexp(n, lambda)
mns = c(mns, dist)
vars[i] = var(dist)}
mns
vars
hist(mns)
hist(vars)
1/(lambda^2)/n
var(vars)
nsim = 1000
mns = NULL
vars = NULL
set.seed(2019)
for (i in 1 : nsim) {
dist[i] <- rexp(n, lambda)
mns = c(mns, dist[i])
}
warnings()
nsim = 1000
mns = NULL
dist = NULL
set.seed(2019)
for (i in 1 : nsim) {
dist[i] <- rexp(n, lambda)
mns = c(mns, dist[i])
}
hist(mns)
var(dist)
mns = NULL
dist = NULL
for (i in 1 : nsim) {
dist = rexp(n, lambda)
mns = c(mns, dist)
}
dim(dist)
dim(mns)
length(dist)
length(mns)
mns = NULL
dist = NULL
for (i in 1 : nsim) {
mns = c(mns, rexp(n, lambda))
}
length(mns)
for (i in 1 : nsim) {
mns = c(mns, mean(rexp(n, lambda)))
}
length(mns)
mns = NULL
for (i in 1 : nsim) {
mns = c(mns, mean(rexp(n, lambda)))
}
length(mns)
hist(mns)
var(mns)
mean(mns)
?hist
abline(v=2)
hist(mns)+abline(v=2)
hist(rexp(nsim,lambda))
mean(rexp(nsim,lambda))
setwd("C:/Users/LeninGrib/Desktop/DS/R/course6/cw1")
install.packages("ToothGrowth")
library(ToothGrowth)
data(ToothGrowth)
str(ToothGrowth)
table(ToothGrowth)
summary(ToothGrowth)
qplot(supp,len,data=ToothGrowth, facets=~dose,
main="Tooth growth of guinea pigs by supplement type and dosage (mg)",
xlab="Supplement type", ylab="Tooth length") +
geom_boxplot(aes(fill = supp))
ggplot(mns, aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
binwidth=.04)
nsim = 1000
mns = NULL
dist = NULL
set.seed(2019)
for (i in 1 : nsim) {
mns = c(mns, mean(rexp(n, lambda)))
}
ggplot(mns, aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
binwidth=.04)
ggplot(aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
binwidth=.04)
?ggplot
ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
binwidth=.04)
ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
main = "distribution of sample means of exponential function (1000 simulations)")
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black',
main = "distribution of sample means of exponential function (1000 simulations)")
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean
plotmean <- ggplot(mapping = aes(mns),
main = "distribution of sample means of exponential function (1000 simulations)") +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + ggtitle("Distribution of sample means of exponential function (1000 simulations)") +
xlab("sample means")
plotmean
require(gridExtra)
install.packages("gridExtra")
library(gridExtra)
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda))
+ geom_histogram(alpha=0.3, fill='white', colour='black'))
+ ggtitle("Distribution randomized exponential function values (1000 simulations)")
+xlab("values")
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda))
+ geom_histogram(alpha=0.3, fill='white', colour='black'))
+ ggtitle("Distribution randomized exponential function values (1000 simulations)")
+ xlab("values")
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + ggtitle("Distribution of sample means of exponential function (1000 simulations)")
+xlab("sample means")
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)"),
xlab("sample means"))
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
xlab("sample means"))
plotmean
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda))
+ geom_histogram(alpha=0.3, fill='white', colour='black'))
+ labs(title = "Distribution randomized exponential function values (1000 simulations)",
xlab("values"))
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
x="sample means")
plotmean
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda))
+ geom_histogram(alpha=0.3, fill='white', colour='black'))
+ labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
