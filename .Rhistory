?ppois
ppois(10, 15)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 7.5)
library(swirl)
swirl()
myplot
myplot(2)
myplot(20)
myplot2(2)
qt(.975,df=2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
range(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975, df = 9)
mn + c(-1,1)*qt(.975, df = 9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
sp<-7*15.34^2+20*18.23^2
ns <- 8+21-2
sp <- sqrt(sp/ns)
(132.86-127.44)+ c(-1,1)*qt(0.975,27)*sp/sqrt(1/8+1/21)
(132.86-127.44)+ c(-1,1)*qt(0.975,ns)*sp/sqrt(1/8+1/21)
(132.86-127.44)+ c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8+1/21)
sp<-sqrt()
sp<-sqrt((sd(g1)*9+sd(g2)*9)/18)
sp<-sqrt((var(g1)*9+var(g2)*9)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(md,18)*sp*sqrt(2/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(2/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1, paired = F, var.equal = T)$conf
t.test(g2,g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE)$conf
num <- (15.34^2/7+18.23^2/20)^2
num <- (15.34^2/8+18.23^2/21)^2
den<-15.34^4/64/7+18.23^4/21^2/20
mydf<-num/den
132.86-127.44 + c(-1,1)*mydf*sqrt(15.34^2/8+18.23^2/21)
132.86-127.44 + c(-1,1)*qt(0.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
1
(32-30)/1
2/1/4
2/10/4
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$fheight,fs$sheight, paired = TRUE)
11.7885 *sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
6
8
pt(2.5,15, lower.tail = FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(7,size = 8, prob = 0.5)
ppois(9,5,lower.tail = FALSE)
?t.test
30/3
1100+c(-1,1)*qt(0.975,8)*10
1100+c(-1,1)*qt(0.95,8)*10
2*3/0.975
2/0.975
2*3/0.95
2*3/0.975
2*3/0.975/2
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9+1/9)
-2+c(-1,1)*qt(.975,18)*0.8/sqrt(9)
-2+c(-1,1)*qt(.975,18)*0.8/sqrt(18)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/9+1/9)
2+c(-1,1)*qnorm(.975)*sqrt(0.5)*sqrt(1/99+1/99)
sd <- sqrt((8*1.5^2+8*1.8^2)/16)
sd
-4+c(-1,1)*qt(.95,16)*sd*sqrt(1/9+1/9)
-2+c(-1,1)*qt(.975,18)*0.8*sqrt(1/10+1/10)
2+c(-1,1)*qnorm(.975)*sqrt(0.5)*sqrt(2/100)
qt(0.975,8)
4.3/3
6/2.3
setwd("C:/Users/LeninGrib/Desktop/DS/R/course6/cw1")
library(ggplot2)
library(gridExtra)
lambda = 0.2
n = 40
nsim = 1000
mns = NULL
set.seed(2019)
for (i in 1 : nsim) {
mns = c(mns, mean(rexp(n, lambda)))
}
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black')
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
x="sample means")
plotmean
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda))
+ geom_histogram(alpha=0.3, fill='white', colour='black'))
+ labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
plotrand <- ggplot(mapping = aes(rexp(nsim,lambda)))
+ geom_histogram(alpha=0.3, fill='white', colour='black')
+ labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
plotrand <- ggplot(mapping = aes(randsam))
+ geom_histogram (alpha=0.3, fill='white', colour='black')
plotrand <- plotrand + labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
plotrand <- ggplot(mapping = aes(randsam)) +
geom_histogram (alpha=0.3, fill='white', colour='black') +
labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
plotrand
randsam <- rexp(nsim,lambda)
plotrand <- ggplot(mapping = aes(randsam)) +
geom_histogram (alpha=0.3, fill='white', colour='black') +
labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values")
pltrand
plotrand
plotnorm <- plotmean + stat_function(fun = dnorm,
args = list(mean = 1/lambda, sd = sqrt(1/(lambda^2)/n)))
plotnorm
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black', binwidth = .2)
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
x="sample means")
plotmean
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black', binwidth = .02)
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
x="sample means")
plotmean
plotmean <- ggplot(mapping = aes(mns)) +
geom_histogram(alpha=0.3, fill='white', colour='black', binwidth = .1)
plotmean <- plotmean + geom_vline(xintercept = 1/lambda,
linetype="dashed", color = "red")
plotmean <- plotmean + geom_vline(xintercept = mean(mns), color = "blue")
plotmean <- plotmean + labs(title = "Distribution of sample means of exponential function (1000 simulations)",
x="sample means")
plotmean
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n, bw){
dnorm(x = x, mean = mean, sd = sd) * n * bw
},
args = c(mean = mean, sd = sd, n = n, bw = .1))
plotnorm
?dnorm
plotnorm <- plotmean + stat_function (fun = function(mean, sd, n, bw){
dnorm(mean = mean, sd = sd) * n * bw
},
args = c(mean = mean, sd = sd, n = n, bw = .1))
plotnorm
plotnorm <- plotmean + stat_function (fun = dnorm(x = x,
mean = mean, sd = sd) * n * .1)
plotnorm <- plotmean + stat_function (fun = dnorm(mean = mean, sd = sd) * n * .1)
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd)
},
args = c(mean = mean, sd = sd, n = n))
plotnorm
tmean = 1/lambda
tsd = sqrt(1/(lambda^2)/n)
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd)
},
args = c(mean = tmean, sd = tsd, n = n))
plotnorm
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd)
},
args = c(mean = tmean, sd = tsd, n = nsim))
plotnorm
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * 0.1
},
args = c(mean = tmean, sd = tsd, n = nsim))
plotnorm
grid.arrange(plotrand, plotnorm, nrow = 2)
c(1/(lambda^2)/n,var(mns))
data.frame(c("theoretical variance", "sample variance"), c(1/(lambda^2)/n,var(mns)))
data.frame(c(1/(lambda^2)/n,var(mns)))
setNames(data.frame(matrix(ncol = 2, nrow = 1)), c("theoretical variance", "sample variance"))
?matrix
setNames(data.frame(matrix(data = c(1/(lambda^2)/n,var(mns)), ncol = 2, nrow = 1)), c("theoretical variance", "sample variance"))
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = tmean, sd = tsd, n = nsim)) + xlim(0, 10)
plotnorm
bw = .1
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = tmean, sd = tsd, n = nsim)) + xlim(0, 10)
plotnorm
plotrand
plotrand <- ggplot(mapping = aes(randsam)) +
geom_histogram (alpha=0.3, fill='white', colour='black', binwidth = bw) +
labs(title = "Distribution randomized exponential function values (1000 simulations)",
x="values") + xlim(0, 10)
plotrand
tmean = 1/lambda
tsd = sqrt(1/(lambda^2)/n)
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = tmean, sd = tsd, n = nsim))
grid.arrange(plotrand, plotnorm, nrow = 2)
plotnorm <- plotmean + stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = tmean, sd = tsd, n = nsim)) + xlim(0, 10)
grid.arrange(plotrand, plotnorm, nrow = 2)
plotnorm <- plotmean +
stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = tmean, sd = tsd, n = nsim), color = "red") +
stat_function (fun = function(x, mean, sd, n){
n * dnorm(x = x, mean = mean, sd = sd) * bw
},
args = c(mean = smean, sd = ssd, n = nsim), color = "red")
?ToothGrowth
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
qplot(supp,len,data=ToothGrowth, facets=~dose,
main="ToothGrowth data: length vs dose, given type of supplement",
xlab="Supplement", ylab="Tooth length") +
geom_boxplot(aes(fill = supp))
hist(ToothGrowth$len[dose == 0.5])
hist(ToothGrowth$len[ToothGrowth$dose == 0.5])
hist(ToothGrowth$len[ToothGrowth$dose == 1])
hist(ToothGrowth$len[ToothGrowth$dose == 2])
hist(ToothGrowth$len)
hist(ToothGrowth$len, breaks = 30)
hist(ToothGrowth$len, breaks = 60)
qplot(len, data = ToothGrowth, geom = "histogram",facets = supp~dose,
fill = as.factor(dose)) + scale_fill_discrete( name = "Dose")
qqnorm(ToothGrowth$len);qqline(ToothGrowth$len)
?qqnorm
qplot(len, data = ToothGrowth, geom = "histogram",facets = supp~dose,
fill = as.factor(dose)) + scale_fill_discrete( name = "Dose")
qplot(supp,len,data=ToothGrowth, facets=~dose,
main="ToothGrowth data: length vs dose, given type of supplement",
xlab="Supplement", ylab="Tooth length") +
geom_boxplot(aes(fill = supp))
?split
split(ToothGrowth, ToothGrowth$dose)
ToothGrowth
?t.test
for (i in c(1:3)) {
t.test(tl[[i]]$len[supp == "OJ"], tl[[i]]$len[supp == "VC"],
alternative = "g")
}
tl <- split(ToothGrowth, ToothGrowth$dose)
for (i in c(1:3)) {
t.test(tl[[i]]$len[supp == "OJ"], tl[[i]]$len[supp == "VC"],
alternative = "g")
}
for (i in c(1:3)) {
with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
with(tl[[1]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
with(tl[[2]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
with(tl[[3]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
for (i in c(1:3)) {
testres[i] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
for (i in c(1:3)) {
testres <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres
testres = NULL
for (i in c(1:3)) {
testres [i] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres = NULL
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres
?rm
rm(testres)
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres = NULL
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres[[1]]$p.value
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
results
testres[[1]]$$confint[2]
testres[[1]]$confint[2]
testres[[1]]$conf.int[2]
"confint2", "p-value", "status"))
hypo <- function (t) {
if ((t$conf.int[1]<0) || (t$p.value < alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose
results[i,"confint1"] <- results[[i]]$conf.int[1]
results[i,"confint2"] <- results[[i]]$conf.int[2]
results[i,"p-value"] <- results[[i]]$p.value
results[i,"status"] <- hypo(results[[i]])
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- results[[i]]$conf.int[1]
results[i,"confint2"] <- results[[i]]$conf.int[2]
results[i,"p-value"] <- results[[i]]$p.value
results[i,"status"] <- hypo(results[[i]])
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- results[[i]]$conf.int[1]
results[i,"confint2"] <- results[[i]]$conf.int[2]
results[i,"p-value"] <- results[[i]]$p.value
##results[i,"status"] <- hypo(results[[i]])
}
testres = NULL
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
hypo <- function (t) {
if ((t$conf.int[1]<0) || (t$p.value < alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- results[[i]]$conf.int[1]
results[i,"confint2"] <- results[[i]]$conf.int[2]
results[i,"p-value"] <- results[[i]]$p.value
results[i,"status"] <- hypo(results[[i]])
}
results[[i]]$conf.int[1]
testres = NULL
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
hypo <- function (t) {
if ((t$conf.int[1]<0) || (t$p.value < alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- testres[[i]]$conf.int[1]
results[i,"confint2"] <- testres[[i]]$conf.int[2]
results[i,"p-value"] <- testres[[i]]$p.value
results[i,"status"] <- hypo(testres[[i]])
}
testres[[1]]$p.value
class(testres[[1]]$p.value)
testres = NULL
alpha = 0.05
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
hypo <- function (t) {
if ((t$conf.int[1]<0) || (t$p.value < alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- testres[[i]]$conf.int[1]
results[i,"confint2"] <- testres[[i]]$conf.int[2]
results[i,"p-value"] <- testres[[i]]$p.value
results[i,"status"] <- hypo(testres[[i]])
}
results
testres = NULL
alpha = 0.05
for (i in c(1:3)) {
testres[[i]] <- with(tl[[i]], t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
hypo <- function (t) {
if ((t$conf.int[1]<0) || (t$p.value > alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- testres[[i]]$conf.int[1]
results[i,"confint2"] <- testres[[i]]$conf.int[2]
results[i,"p-value"] <- testres[[i]]$p.value
results[i,"status"] <- hypo(testres[[i]])
}
results
testres = NULL
for (i in c(1:2)) {
testres[[i]] <- with(tl[[i]],
t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "g"))
}
testres[[3]] <- with(tl[[3]],
t.test(len[supp == "OJ"], len[supp == "VC"],
alternative = "two"))
results <- setNames(data.frame(matrix(ncol = 7, nrow = 0)),
c("supp1", "supp2", "dose", "confint1",
"confint2", "p-value", "status"))
?prod
class(testres[[1]]$conf.int[1])
sign(prod(testres[[1]]$conf.int[1]), testres[[1]]$conf.int[2])))
sign(prod(testres[[1]]$conf.int[1]), testres[[1]]$conf.int[2]))
sign(prod(testres[[1]]$conf.int[1]), testres[[1]]$conf.int[2])
sign(prod(testres[[1]]$conf.int[1], testres[[1]]$conf.int[2]))
sign(prod(testres[[2]]$conf.int[1], testres[[2]]$conf.int[2]))
?sign
sign(prod(t[[1]]$conf.int))
class(t[[1]]$conf.int)
sign(prod(testres[[1]]$conf.int))
"confint2", "p-value", "status"))
hypo <- function (t) {
outZero <- sign(prod(t$conf.int))
if ((outZero != 1) || (t$p.value > alpha)) {
"fail to reject"
} else {
"reject"
}
hypo <- function (t) {
outZero <- sign(prod(t$conf.int))
if ((outZero != 1) || (t$p.value > alpha)) {
"fail to reject"
} else {
"reject"
}
for (i in c(1:3)) {
results[i,"supp1"] <- "OJ"
results[i,"supp2"] <- "VC"
results[i,"dose"] <- tl[[i]]$dose[1]
results[i,"confint1"] <- testres[[i]]$conf.int[1]
results[i,"confint2"] <- testres[[i]]$conf.int[2]
results[i,"p-value"] <- testres[[i]]$p.value
results[i,"status"] <- hypo(testres[[i]])
}
results
